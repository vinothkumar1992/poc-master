{"version":3,"sources":["./node_modules/@sweetalert2/ngx-sweetalert2/fesm2015/sweetalert2-ngx-sweetalert2.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACkP;AACrP;AACY;AACI;;AAE/C;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb,8BAA8B,4DAAc;AAC5C,WAAW,EAAE;AACb,kCAAkC,4DAAc;;AAEhD;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,+DAA+D,EAAE;AACjE;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA;AACA,KAAK,gCAAgC,OAAO,oDAAM,8BAA8B;AAChF;AACA,WAAW,EAWV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,yBAAyB;AACzF;AACA;AACA;AACA;AACA,mHAAmH;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA,wBAAwB,0DAAY;AACpC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA,4CAA4C,iBAAiB;AAC7D;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB,WAAW,eAAe,YAAY,+BAA+B;AAC9G;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,6CAA6C,EAAE;AAC/C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,uDAAS;AACxB,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB,4CAA4C,qBAAqB;AACjE,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,0CAA0C,eAAe;AACzD,iBAAiB;AACjB,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,oCAAoC,eAAe;AACnD,iBAAiB;AACjB,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,sCAAsC,eAAe;AACrD,iBAAiB;AACjB,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,qCAAqC,eAAe;AACpD,iBAAiB;AACjB,4BAA4B;AAC5B;AACA;AACA;AACA,iBAAiB,GAAG;AACpB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,0BAA0B;AAC1B,gBAAgB;AAChB;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa,eAAe,EAAE,OAAO;AACrC;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD,aAAa;AACb;AACA;AACA;AACA,KAAK,iCAAiC;AACtC,KAAK,8BAA8B,OAAO,oDAAM,kCAAkC;AAClF;AACA;AACA,aAAa,OAAO,mDAAK,EAAE;AAC3B,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,YAAY,OAAO,mDAAK,EAAE;AAC1B,YAAY,OAAO,mDAAK,EAAE;AAC1B,cAAc,OAAO,mDAAK,EAAE;AAC5B,YAAY,OAAO,mDAAK,EAAE;AAC1B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,aAAa,OAAO,mDAAK,EAAE;AAC3B,cAAc,OAAO,mDAAK,EAAE;AAC5B,aAAa,OAAO,mDAAK,EAAE;AAC3B,aAAa,OAAO,mDAAK,EAAE;AAC3B,eAAe,OAAO,mDAAK,EAAE;AAC7B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,YAAY,OAAO,mDAAK,EAAE;AAC1B,mBAAmB,OAAO,mDAAK,EAAE;AACjC,4BAA4B,OAAO,mDAAK,EAAE;AAC1C,aAAa,OAAO,mDAAK,EAAE;AAC3B,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,yBAAyB,OAAO,mDAAK,EAAE;AACvC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,8BAA8B,OAAO,mDAAK,EAAE;AAC5C,8BAA8B,OAAO,mDAAK,EAAE;AAC5C,yBAAyB,OAAO,mDAAK,EAAE;AACvC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,yBAAyB,OAAO,mDAAK,EAAE;AACvC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,yBAAyB,OAAO,mDAAK,EAAE;AACvC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,yBAAyB,OAAO,mDAAK,EAAE;AACvC,8BAA8B,OAAO,mDAAK,EAAE;AAC5C,6BAA6B,OAAO,mDAAK,EAAE;AAC3C,sBAAsB,OAAO,mDAAK,EAAE;AACpC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,4BAA4B,OAAO,mDAAK,EAAE;AAC1C,2BAA2B,OAAO,mDAAK,EAAE;AACzC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,yBAAyB,OAAO,mDAAK,EAAE;AACvC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,2BAA2B,OAAO,mDAAK,EAAE;AACzC,6BAA6B,OAAO,mDAAK,EAAE;AAC3C,wBAAwB,OAAO,mDAAK,EAAE;AACtC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,4BAA4B,OAAO,mDAAK,EAAE;AAC1C,kBAAkB,OAAO,oDAAM,EAAE;AACjC,YAAY,OAAO,oDAAM,EAAE;AAC3B,cAAc,OAAO,oDAAM,EAAE;AAC7B,aAAa,OAAO,oDAAM,EAAE;AAC5B,kBAAkB,OAAO,oDAAM,EAAE;AACjC,eAAe,OAAO,oDAAM,EAAE;AAC9B,cAAc,OAAO,oDAAM,EAAE;AAC7B;AACA,WAAW,EAsOV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,+BAA+B,4CAAO;AACtC,sDAAsD,gEAAS;AAC/D,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,qDAAqD,gEAAS;AAC9D,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,8DAAgB,EAAE;AAC9B,KAAK,OAAO,sEAAwB;AACpC;AACA;AACA,YAAY,OAAO,mDAAK,EAAE;AAC1B,eAAe,OAAO,oDAAM,EAAE;AAC9B,cAAc,OAAO,oDAAM,EAAE;AAC7B,eAAe,OAAO,0DAAY,gCAAgC;AAClE;AACA,WAAW,EA6DV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,WAAW,EAGV;AACD;AACA;AACA;AACA;AACA,sBAAsB;AACtB,WAAW,EAGV;AACD;AACA;AACA;AACA;AACA,wBAAwB;AACxB,WAAW,EAGV;AACD;AACA;AACA;AACA;AACA,uBAAuB;AACvB,WAAW,EAGV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,WAAW,EAQV;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,gCAAgC,EAAE;AAClC;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,KAAK,OAAO,wDAAU,UAAU,qBAAqB;AACrD;AACA,uDAAuD,wEAAkB,EAAE,gDAAgD,gCAAgC,EAAE,gDAAgD;AAC7M,WAAW,EAyCV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,iCAAiC,qEAAuB;AACxD,aAAa;AACb;AACA;AACA,gBAAgB,OAAO,mDAAK,EAAE;AAC9B;AACA,WAAW,EAGV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,qDAAqD,yBAAyB;AAC9E,sDAAsD,wBAAwB;AAC9E;AACA;AACA,yEAAyE,iCAAiC;AAC1G;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4CAAO;AACpC;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gEAAS;AAChD,2CAA2C,gEAAS;AACpD,2CAA2C,gEAAS;AACpD;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sBAAsB;AAC9B;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2BAA2B;AAC/C;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK,OAAO,sEAAwB,EAAE;AACtC,KAAK,OAAO,sDAAQ,EAAE;AACtB,KAAK,OAAO,4DAAc,EAAE;AAC5B,KAAK,OAAO,yDAAW,EAAE;AACzB,KAAK,iCAAiC;AACtC,KAAK,0BAA0B;AAC/B,KAAK,oCAAoC,OAAO,kDAAI,EAAE;AACtD;AACA;AACA,cAAc,OAAO,mDAAK,yBAAyB;AACnD;AACA,WAAW,EAuDV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,oCAAoC;AACpC,WAAW,EAKV;AACD;AACA,YAAY;AACZ;AACA;AACA,WAAW,qLAAqB;AAChC;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,iBAAiB,kFAAkF;AACnG,iBAAiB;AACjB;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA;AACA;AACA;AACA,oBAAoB,4DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAE8O;AAC9O","file":"default~app-content-extra-components-extra-components-module~layouts-back-office-layout-back-office-~d848927c-es2015.js","sourcesContent":["import { __awaiter } from 'tslib';\nimport { InjectionToken, Injectable, Inject, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, Directive, ViewContainerRef, ComponentFactoryResolver, HostListener, ɵɵdefineInjectable, Injector, ApplicationRef, TemplateRef, Host, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst swalProviderToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#swalLibraryToken');\n/** @type {?} */\nconst dismissOnDestroyToken = new InjectionToken('@sweetalert2/ngx-sweetalert2#dismissOnDestroy');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass SweetAlert2LoaderService {\n    // Using any because Angular metadata generator does not understand a pure TS type here\n    /**\n     * @param {?} swalProvider\n     */\n    constructor(swalProvider) {\n        this.swalProvider = swalProvider;\n    }\n    /**\n     * @return {?}\n     */\n    get swal() {\n        if (!this.swalPromiseCache) {\n            this.preloadSweetAlertLibrary();\n        }\n        return (/** @type {?} */ (this.swalPromiseCache));\n    }\n    /**\n     * @return {?}\n     */\n    preloadSweetAlertLibrary() {\n        if (this.swalPromiseCache)\n            return;\n        /** @type {?} */\n        const libPromise = isLoader(this.swalProvider)\n            ? this.swalProvider()\n            : Promise.resolve(this.swalProvider);\n        this.swalPromiseCache = libPromise.then((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => isDefaultExport(value) ? value : value.default));\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        function isLoader(value) {\n            return typeof value === 'function' && ((/** @type {?} */ (value))).version === undefined;\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        function isDefaultExport(value) {\n            return typeof value === 'function';\n        }\n    }\n}\nSweetAlert2LoaderService.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nSweetAlert2LoaderService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [swalProviderToken,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    SweetAlert2LoaderService.prototype.swalProvider;\n    /**\n     * @type {?}\n     * @private\n     */\n    SweetAlert2LoaderService.prototype.swalPromiseCache;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of \\@Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe.\n *\n * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many \\@Inputs,\n *     take a look at [swalOptions], that lets you pass a full {\\@link SweetAlertOptions} object.\n *\n * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.\n *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.\n *     If you are really concerned about performance and/or don't care about the API and its convenient integration\n *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)\n *\n * /!\\ Some SweetAlert options aren't \\@Inputs but \\@Outputs: onBeforeOpen, onOpen, onClose and onAfterClose\n *     (but without \"on*\" prefix to respect community standards).\n *     However, preConfirm and inputValidator are still \\@Inputs because there are not event handlers, there can't be\n *     multiple listeners and we need the values they can/must return.\n */\nclass SwalComponent {\n    /**\n     * @param {?} sweetAlert2Loader\n     * @param {?} moduleLevelDismissOnDestroy\n     */\n    constructor(sweetAlert2Loader, moduleLevelDismissOnDestroy) {\n        this.sweetAlert2Loader = sweetAlert2Loader;\n        this.moduleLevelDismissOnDestroy = moduleLevelDismissOnDestroy;\n        /**\n         * Emits an event when the modal DOM element has been created.\n         * Useful to perform DOM mutations before the modal is shown.\n         */\n        this.beforeOpen = new EventEmitter();\n        /**\n         * Emits an event when the modal is shown.\n         */\n        this.open = new EventEmitter();\n        /**\n         * Emits an event when the modal DOM is rendered.\n         */\n        this.render = new EventEmitter();\n        /**\n         * Emits an event when the modal will be closed.\n         * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.\n         */\n        this.close = new EventEmitter();\n        /**\n         * Emits an event after the modal had been closed.\n         * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.\n         */\n        this.afterClose = new EventEmitter();\n        /**\n         * Emits when the user clicks \"Confirm\".\n         * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n         *\n         * Example:\n         *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n         *\n         *     public handleConfirm(email: string): void {\n         *         // ... save user email\n         *     }\n         */\n        this.confirm = new EventEmitter();\n        /**\n         * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n         * By default, it will emit a string representing the reason for which the SweetAlert has been closed.\n         * The reason is `undefined` when {\\@link dismiss} is called.\n         *\n         * Example:\n         *     <swal (cancel)=\"handleCancel($event)\"></swal>\n         *\n         *     public handleCancel(reason: DismissReason | undefined): void {\n         *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n         *         // ... do something\n         *     }\n         */\n        this.cancel = new EventEmitter();\n        /**\n         * This Set retains the properties that have been changed from \\@Inputs, so we can know precisely\n         * what options we have to send to {\\@link Swal.fire}.\n         */\n        this.touchedProps = new Set();\n        /**\n         * A function of signature `(propName: string): void` that adds a given property name to the list of\n         * touched properties, ie. {\\@link touchedProps}.\n         */\n        this.markTouched = this.touchedProps.add.bind(this.touchedProps);\n        /**\n         * Is the SweetAlert2 modal represented by this component currently opened?\n         */\n        this.isCurrentlyShown = false;\n    }\n    /**\n     * An object of SweetAlert2 native options, useful if:\n     *  - you don't want to use the \\@Inputs for practical/philosophical reasons ;\n     *  - there are missing \\@Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n     *\n     * /!\\ Please note that setting this property does NOT erase what has been set before unless you specify the\n     *     previous properties you want to erase again.\n     *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.\n     *\n     * /!\\ Be aware that the options defined in this object will override the \\@Inputs of the same name.\n     * @param {?} options\n     * @return {?}\n     */\n    set swalOptions(options) {\n        //=> Update properties\n        Object.assign(this, options);\n        //=> Mark changed properties as touched\n        /** @type {?} */\n        const touchedKeys = (/** @type {?} */ (Object.keys(options)));\n        touchedKeys.forEach(this.markTouched);\n    }\n    /**\n     * Computes the options object that will get passed to SweetAlert2.\n     * Only the properties that have been set at least once on this component will be returned.\n     * Mostly for internal usage.\n     * @return {?}\n     */\n    get swalOptions() {\n        /** @type {?} */\n        const options = {};\n        //=> We will compute the options object based on the option keys that are known to have changed.\n        //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially\n        //   avoiding side effects.\n        this.touchedProps.forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        prop => {\n            options[prop] = this[(/** @type {?} */ (prop))];\n        }));\n        return options;\n    }\n    /**\n     * Angular lifecycle hook.\n     * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there\n     * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,\n     * causing no delay.\n     * @return {?}\n     */\n    ngOnInit() {\n        //=> Preload SweetAlert2 library in case this component is activated.\n        this.sweetAlert2Loader.preloadSweetAlertLibrary();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can\n        //   send it with the next fire() or update() calls.\n        Object.keys(changes)\n            //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter\n            .filter((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        (prop) => !prop.startsWith('swal')))\n            .forEach(this.markTouched);\n        //=> Eventually trigger re-render if the modal is open.\n        void this.update();\n    }\n    /**\n     * Angular lifecycle hook.\n     * Closes the SweetAlert when the component is destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        //=> Release the modal if the component is destroyed and if that behaviour is not disabled.\n        /** @type {?} */\n        const dismissOnDestroy = this.swalDismissOnDestroy === undefined\n            ? this.moduleLevelDismissOnDestroy\n            : this.swalDismissOnDestroy;\n        dismissOnDestroy && this.dismiss();\n    }\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (cancel)=\"myHandler($event)\" can be used in templates.\n     * @return {?}\n     */\n    fire() {\n        return __awaiter(this, void 0, void 0, function* () {\n            /** @type {?} */\n            const swal = yield this.sweetAlert2Loader.swal;\n            //=> Build the SweetAlert2 options\n            /** @type {?} */\n            const options = Object.assign({}, this.swalOptions, { onBeforeOpen: (/**\n                 * @param {?} modalElement\n                 * @return {?}\n                 */\n                (modalElement) => {\n                    this.beforeOpen.emit({ modalElement });\n                }), onOpen: (/**\n                 * @param {?} modalElement\n                 * @return {?}\n                 */\n                (modalElement) => {\n                    this.isCurrentlyShown = true;\n                    this.open.emit({ modalElement });\n                }), onRender: (/**\n                 * @param {?} modalElement\n                 * @return {?}\n                 */\n                (modalElement) => {\n                    this.render.emit({ modalElement });\n                }), onClose: (/**\n                 * @param {?} modalElement\n                 * @return {?}\n                 */\n                (modalElement) => {\n                    this.isCurrentlyShown = false;\n                    this.close.emit({ modalElement });\n                }), onAfterClose: (/**\n                 * @return {?}\n                 */\n                () => {\n                    this.afterClose.emit();\n                }) });\n            //=> Show the Swal! And wait for confirmation or dimissal.\n            /** @type {?} */\n            const result = yield swal.fire(options);\n            //=> Emit on (confirm) or (cancel)\n            if ('value' in result) {\n                this.confirm.emit(result.value);\n            }\n            else {\n                this.cancel.emit(result.dismiss);\n            }\n            return result;\n        });\n    }\n    /**\n     * Closes the modal, if opened.\n     *\n     * @param {?=} result The value that the modal will resolve with, triggering either (confirm) or (cancel).\n     *               If the argument is not passed, (dimiss) will emit `undefined`.\n     *               See {\\@link Swal.close}\n     * @return {?}\n     */\n    dismiss(result) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.isCurrentlyShown)\n                return;\n            /** @type {?} */\n            const swal = yield this.sweetAlert2Loader.swal;\n            swal.close(result);\n        });\n    }\n    /**\n     * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.\n     * If the modal is not opened, the component options will simply be updated and that's it.\n     *\n     * /!\\ Please note that not all SweetAlert2 options are updatable while the modal is opened.\n     *\n     * @param {?=} options\n     * @return {?}\n     */\n    update(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (options) {\n                this.swalOptions = options;\n            }\n            if (!this.isCurrentlyShown)\n                return;\n            /** @type {?} */\n            const swal = yield this.sweetAlert2Loader.swal;\n            /** @type {?} */\n            const allOptions = this.swalOptions;\n            /** @type {?} */\n            const updatableOptions = Object.keys(allOptions)\n                .filter((/**\n             * @param {?} key\n             * @return {?}\n             */\n            (key) => swal.isUpdatableParameter(key)))\n                .reduce((/**\n             * @param {?} obj\n             * @param {?} key\n             * @return {?}\n             */\n            (obj, key) => {\n                obj[key] = allOptions[key];\n                return obj;\n            }), (/** @type {?} */ ({})));\n            swal.update(updatableOptions);\n        });\n    }\n}\nSwalComponent.decorators = [\n    { type: Component, args: [{\n                // tslint:disable-next-line:component-selector\n                selector: 'swal',\n                template: '',\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }] }\n];\n/** @nocollapse */\nSwalComponent.ctorParameters = () => [\n    { type: SweetAlert2LoaderService },\n    { type: Boolean, decorators: [{ type: Inject, args: [dismissOnDestroyToken,] }] }\n];\nSwalComponent.propDecorators = {\n    title: [{ type: Input }],\n    titleText: [{ type: Input }],\n    text: [{ type: Input }],\n    html: [{ type: Input }],\n    footer: [{ type: Input }],\n    type: [{ type: Input }],\n    backdrop: [{ type: Input }],\n    toast: [{ type: Input }],\n    target: [{ type: Input }],\n    input: [{ type: Input }],\n    width: [{ type: Input }],\n    padding: [{ type: Input }],\n    background: [{ type: Input }],\n    position: [{ type: Input }],\n    grow: [{ type: Input }],\n    customClass: [{ type: Input }],\n    customContainerClass: [{ type: Input }],\n    timer: [{ type: Input }],\n    animation: [{ type: Input }],\n    heightAuto: [{ type: Input }],\n    allowOutsideClick: [{ type: Input }],\n    allowEscapeKey: [{ type: Input }],\n    allowEnterKey: [{ type: Input }],\n    stopKeydownPropagation: [{ type: Input }],\n    keydownListenerCapture: [{ type: Input }],\n    showConfirmButton: [{ type: Input }],\n    showCancelButton: [{ type: Input }],\n    confirmButtonText: [{ type: Input }],\n    cancelButtonText: [{ type: Input }],\n    confirmButtonColor: [{ type: Input }],\n    cancelButtonColor: [{ type: Input }],\n    confirmButtonClass: [{ type: Input }],\n    cancelButtonClass: [{ type: Input }],\n    confirmButtonAriaLabel: [{ type: Input }],\n    cancelButtonAriaLabel: [{ type: Input }],\n    buttonsStyling: [{ type: Input }],\n    reverseButtons: [{ type: Input }],\n    focusConfirm: [{ type: Input }],\n    focusCancel: [{ type: Input }],\n    showCloseButton: [{ type: Input }],\n    closeButtonHtml: [{ type: Input }],\n    closeButtonAriaLabel: [{ type: Input }],\n    showLoaderOnConfirm: [{ type: Input }],\n    preConfirm: [{ type: Input }],\n    imageUrl: [{ type: Input }],\n    imageWidth: [{ type: Input }],\n    imageHeight: [{ type: Input }],\n    imageAlt: [{ type: Input }],\n    imageClass: [{ type: Input }],\n    inputPlaceholder: [{ type: Input }],\n    inputValue: [{ type: Input }],\n    inputOptions: [{ type: Input }],\n    inputAutoTrim: [{ type: Input }],\n    inputAttributes: [{ type: Input }],\n    inputValidator: [{ type: Input }],\n    validationMessage: [{ type: Input }],\n    inputClass: [{ type: Input }],\n    progressSteps: [{ type: Input }],\n    currentProgressStep: [{ type: Input }],\n    progressStepsDistance: [{ type: Input }],\n    scrollbarPadding: [{ type: Input }],\n    swalOptions: [{ type: Input }],\n    swalDismissOnDestroy: [{ type: Input }],\n    beforeOpen: [{ type: Output }],\n    open: [{ type: Output }],\n    render: [{ type: Output }],\n    close: [{ type: Output }],\n    afterClose: [{ type: Output }],\n    confirm: [{ type: Output }],\n    cancel: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    SwalComponent.prototype.title;\n    /** @type {?} */\n    SwalComponent.prototype.titleText;\n    /** @type {?} */\n    SwalComponent.prototype.text;\n    /** @type {?} */\n    SwalComponent.prototype.html;\n    /** @type {?} */\n    SwalComponent.prototype.footer;\n    /** @type {?} */\n    SwalComponent.prototype.type;\n    /** @type {?} */\n    SwalComponent.prototype.backdrop;\n    /** @type {?} */\n    SwalComponent.prototype.toast;\n    /** @type {?} */\n    SwalComponent.prototype.target;\n    /** @type {?} */\n    SwalComponent.prototype.input;\n    /** @type {?} */\n    SwalComponent.prototype.width;\n    /** @type {?} */\n    SwalComponent.prototype.padding;\n    /** @type {?} */\n    SwalComponent.prototype.background;\n    /** @type {?} */\n    SwalComponent.prototype.position;\n    /** @type {?} */\n    SwalComponent.prototype.grow;\n    /** @type {?} */\n    SwalComponent.prototype.customClass;\n    /**\n     * @deprecated Use customClass instead\n     * @type {?}\n     */\n    SwalComponent.prototype.customContainerClass;\n    /** @type {?} */\n    SwalComponent.prototype.timer;\n    /** @type {?} */\n    SwalComponent.prototype.animation;\n    /** @type {?} */\n    SwalComponent.prototype.heightAuto;\n    /** @type {?} */\n    SwalComponent.prototype.allowOutsideClick;\n    /** @type {?} */\n    SwalComponent.prototype.allowEscapeKey;\n    /** @type {?} */\n    SwalComponent.prototype.allowEnterKey;\n    /** @type {?} */\n    SwalComponent.prototype.stopKeydownPropagation;\n    /** @type {?} */\n    SwalComponent.prototype.keydownListenerCapture;\n    /** @type {?} */\n    SwalComponent.prototype.showConfirmButton;\n    /** @type {?} */\n    SwalComponent.prototype.showCancelButton;\n    /** @type {?} */\n    SwalComponent.prototype.confirmButtonText;\n    /** @type {?} */\n    SwalComponent.prototype.cancelButtonText;\n    /** @type {?} */\n    SwalComponent.prototype.confirmButtonColor;\n    /** @type {?} */\n    SwalComponent.prototype.cancelButtonColor;\n    /**\n     * @deprecated Use customClass instead\n     * @type {?}\n     */\n    SwalComponent.prototype.confirmButtonClass;\n    /**\n     * @deprecated Use customClass instead\n     * @type {?}\n     */\n    SwalComponent.prototype.cancelButtonClass;\n    /** @type {?} */\n    SwalComponent.prototype.confirmButtonAriaLabel;\n    /** @type {?} */\n    SwalComponent.prototype.cancelButtonAriaLabel;\n    /** @type {?} */\n    SwalComponent.prototype.buttonsStyling;\n    /** @type {?} */\n    SwalComponent.prototype.reverseButtons;\n    /** @type {?} */\n    SwalComponent.prototype.focusConfirm;\n    /** @type {?} */\n    SwalComponent.prototype.focusCancel;\n    /** @type {?} */\n    SwalComponent.prototype.showCloseButton;\n    /** @type {?} */\n    SwalComponent.prototype.closeButtonHtml;\n    /** @type {?} */\n    SwalComponent.prototype.closeButtonAriaLabel;\n    /** @type {?} */\n    SwalComponent.prototype.showLoaderOnConfirm;\n    /** @type {?} */\n    SwalComponent.prototype.preConfirm;\n    /** @type {?} */\n    SwalComponent.prototype.imageUrl;\n    /** @type {?} */\n    SwalComponent.prototype.imageWidth;\n    /** @type {?} */\n    SwalComponent.prototype.imageHeight;\n    /** @type {?} */\n    SwalComponent.prototype.imageAlt;\n    /**\n     * @deprecated Use customClass instead\n     * @type {?}\n     */\n    SwalComponent.prototype.imageClass;\n    /** @type {?} */\n    SwalComponent.prototype.inputPlaceholder;\n    /** @type {?} */\n    SwalComponent.prototype.inputValue;\n    /** @type {?} */\n    SwalComponent.prototype.inputOptions;\n    /** @type {?} */\n    SwalComponent.prototype.inputAutoTrim;\n    /** @type {?} */\n    SwalComponent.prototype.inputAttributes;\n    /** @type {?} */\n    SwalComponent.prototype.inputValidator;\n    /** @type {?} */\n    SwalComponent.prototype.validationMessage;\n    /**\n     * @deprecated Use customClass instead\n     * @type {?}\n     */\n    SwalComponent.prototype.inputClass;\n    /** @type {?} */\n    SwalComponent.prototype.progressSteps;\n    /** @type {?} */\n    SwalComponent.prototype.currentProgressStep;\n    /** @type {?} */\n    SwalComponent.prototype.progressStepsDistance;\n    /** @type {?} */\n    SwalComponent.prototype.scrollbarPadding;\n    /**\n     * Whether to dismiss the modal when the <swal> component is destroyed by Angular (for any reason) or not.\n     * When left undefined (default), the value will be inherited from the module configuration.\n     * @type {?}\n     */\n    SwalComponent.prototype.swalDismissOnDestroy;\n    /**\n     * Emits an event when the modal DOM element has been created.\n     * Useful to perform DOM mutations before the modal is shown.\n     * @type {?}\n     */\n    SwalComponent.prototype.beforeOpen;\n    /**\n     * Emits an event when the modal is shown.\n     * @type {?}\n     */\n    SwalComponent.prototype.open;\n    /**\n     * Emits an event when the modal DOM is rendered.\n     * @type {?}\n     */\n    SwalComponent.prototype.render;\n    /**\n     * Emits an event when the modal will be closed.\n     * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.\n     * @type {?}\n     */\n    SwalComponent.prototype.close;\n    /**\n     * Emits an event after the modal had been closed.\n     * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.\n     * @type {?}\n     */\n    SwalComponent.prototype.afterClose;\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     * @type {?}\n     */\n    SwalComponent.prototype.confirm;\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed.\n     * The reason is `undefined` when {\\@link dismiss} is called.\n     *\n     * Example:\n     *     <swal (cancel)=\"handleCancel($event)\"></swal>\n     *\n     *     public handleCancel(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     * @type {?}\n     */\n    SwalComponent.prototype.cancel;\n    /**\n     * This Set retains the properties that have been changed from \\@Inputs, so we can know precisely\n     * what options we have to send to {\\@link Swal.fire}.\n     * @type {?}\n     * @private\n     */\n    SwalComponent.prototype.touchedProps;\n    /**\n     * A function of signature `(propName: string): void` that adds a given property name to the list of\n     * touched properties, ie. {\\@link touchedProps}.\n     * @type {?}\n     * @private\n     */\n    SwalComponent.prototype.markTouched;\n    /**\n     * Is the SweetAlert2 modal represented by this component currently opened?\n     * @type {?}\n     * @private\n     */\n    SwalComponent.prototype.isCurrentlyShown;\n    /**\n     * @type {?}\n     * @private\n     */\n    SwalComponent.prototype.sweetAlert2Loader;\n    /**\n     * @type {?}\n     * @private\n     */\n    SwalComponent.prototype.moduleLevelDismissOnDestroy;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, type] - the type being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\nclass SwalDirective {\n    /**\n     * @param {?} viewContainerRef\n     * @param {?} resolver\n     */\n    constructor(viewContainerRef, resolver) {\n        this.viewContainerRef = viewContainerRef;\n        this.resolver = resolver;\n        /**\n         * Emits when the user clicks \"Confirm\".\n         * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n         *\n         * Example:\n         *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n         *\n         *     public handleConfirm(email: string): void {\n         *         // ... save user email\n         *     }\n         */\n        this.confirm = new EventEmitter();\n        /**\n         * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n         * By default, it will emit a string representing the reason for which the SweetAlert has been closed.\n         * The reason is `undefined` when {\\@link dismiss} is called.\n         *\n         * Example:\n         *     <swal (cancel)=\"handleCancel($event)\"></swal>\n         *\n         *     public handleCancel(reason: DismissReason | undefined): void {\n         *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n         *         // ... do something\n         *     }\n         */\n        this.cancel = new EventEmitter();\n    }\n    /**\n     * SweetAlert2 options or a SwalComponent instance.\n     * See the class doc block for more informations.\n     * @param {?} options\n     * @return {?}\n     */\n    set swal(options) {\n        if (options instanceof SwalComponent) {\n            this.swalInstance = options;\n        }\n        else if (Array.isArray(options)) {\n            this.swalOptions = {};\n            [this.swalOptions.title, this.swalOptions.text, this.swalOptions.type] = options;\n        }\n        else {\n            this.swalOptions = options;\n        }\n    }\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and\n     * (cancel) outputs to reemit on the directive.\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.swalInstance) {\n            /** @type {?} */\n            const factory = this.resolver.resolveComponentFactory(SwalComponent);\n            this.swalRef = this.viewContainerRef.createComponent(factory);\n            this.swalInstance = this.swalRef.instance;\n        }\n    }\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.swalRef) {\n            this.swalRef.destroy();\n        }\n    }\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     * @param {?} event\n     * @return {?}\n     */\n    onClick(event) {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n        if (!this.swalInstance)\n            return;\n        if (this.swalOptions) {\n            this.swalInstance.swalOptions = this.swalOptions;\n        }\n        /** @type {?} */\n        const swalClosed = new Subject();\n        this.swalInstance.confirm.asObservable().pipe(takeUntil(swalClosed)).subscribe((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => this.confirm.emit(v)));\n        this.swalInstance.cancel.asObservable().pipe(takeUntil(swalClosed)).subscribe((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => this.cancel.emit(v)));\n        this.swalInstance.fire().then((/**\n         * @return {?}\n         */\n        () => swalClosed.next()));\n    }\n}\nSwalDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[swal]'\n            },] }\n];\n/** @nocollapse */\nSwalDirective.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ComponentFactoryResolver }\n];\nSwalDirective.propDecorators = {\n    swal: [{ type: Input }],\n    confirm: [{ type: Output }],\n    cancel: [{ type: Output }],\n    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]\n};\nif (false) {\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     <swal (confirm)=\"handleConfirm($event)\"></swal>\n     *\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     * @type {?}\n     */\n    SwalDirective.prototype.confirm;\n    /**\n     * Emits when the user clicks \"Cancel\", or dismisses the modal by any other allowed way.\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed.\n     * The reason is `undefined` when {\\@link dismiss} is called.\n     *\n     * Example:\n     *     <swal (cancel)=\"handleCancel($event)\"></swal>\n     *\n     *     public handleCancel(reason: DismissReason | undefined): void {\n     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.\n     *         // ... do something\n     *     }\n     * @type {?}\n     */\n    SwalDirective.prototype.cancel;\n    /**\n     * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n     * options to it.\n     * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n     * @type {?}\n     * @private\n     */\n    SwalDirective.prototype.swalRef;\n    /**\n     * An instance of the <swal> component that this directive controls.\n     * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n     * @type {?}\n     * @private\n     */\n    SwalDirective.prototype.swalInstance;\n    /**\n     * Holds the native SweetAlert2 options.\n     * Empty when the user passed an existing SwalComponent instance.\n     * @type {?}\n     * @private\n     */\n    SwalDirective.prototype.swalOptions;\n    /**\n     * @type {?}\n     * @private\n     */\n    SwalDirective.prototype.viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    SwalDirective.prototype.resolver;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Emitted when a SweetAlert modal gets created in memory, just before it's displayed.\n * @record\n */\nfunction BeforeOpenEvent() { }\nif (false) {\n    /** @type {?} */\n    BeforeOpenEvent.prototype.modalElement;\n}\n/**\n * Emitted when a SweetAlert modal gets displayed.\n * @record\n */\nfunction OpenEvent() { }\nif (false) {\n    /** @type {?} */\n    OpenEvent.prototype.modalElement;\n}\n/**\n * Emitted when a SweetAlert modal gets rendered.\n * @record\n */\nfunction RenderEvent() { }\nif (false) {\n    /** @type {?} */\n    RenderEvent.prototype.modalElement;\n}\n/**\n * Emitted when a SweetAlert modal gets closed (because it's been confirmed, cancelled, or for no reason at all).\n * @record\n */\nfunction CloseEvent() { }\nif (false) {\n    /** @type {?} */\n    CloseEvent.prototype.modalElement;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction SwalPortalTarget() { }\nif (false) {\n    /** @type {?|undefined} */\n    SwalPortalTarget.prototype.options;\n    /**\n     * @param {?} swal\n     * @return {?}\n     */\n    SwalPortalTarget.prototype.element = function (swal) { };\n}\n/**\n * Represents an object of targets for <swal> portals (use with *swalPortal directive).\n * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\nclass SwalPortalTargets {\n    constructor() {\n        /**\n         * Targets the modal close button block contents.\n         */\n        this.closeButton = {\n            element: (/**\n             * @param {?} swal\n             * @return {?}\n             */\n            swal => swal.getCloseButton()),\n            options: { showCloseButton: true }\n        };\n        /**\n         * Targets the modal title block contents.\n         */\n        this.title = {\n            element: (/**\n             * @param {?} swal\n             * @return {?}\n             */\n            swal => swal.getTitle()),\n            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n            options: { title: ' ' }\n        };\n        /**\n         * Targets the modal text block contents (that is another block inside the first content block, so you can still\n         * use other modal features like Swal inputs, that are situated inside that parent content block).\n         */\n        this.content = {\n            element: (/**\n             * @param {?} swal\n             * @return {?}\n             */\n            swal => (/** @type {?} */ (swal.getContent().querySelector('#swal2-content')))),\n            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n            options: { text: ' ' }\n        };\n        /**\n         * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.\n         * /!\\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this\n         *     target, do not update the modal via <swal> \\@Inputs while the modal is open, or you'll get an error.\n         *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and\n         *     performance of everyone, for a relatively rare use case.\n         */\n        this.actions = {\n            element: (/**\n             * @param {?} swal\n             * @return {?}\n             */\n            swal => swal.getActions()),\n            // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.\n            options: { showConfirmButton: true }\n        };\n        /**\n         * Targets the confirm button contents, replacing the text inside it (not the button itself)\n         */\n        this.confirmButton = {\n            element: (/**\n             * @param {?} swal\n             * @return {?}\n             */\n            swal => swal.getConfirmButton()),\n            options: { showConfirmButton: true }\n        };\n        /**\n         * Targets the cancel button contents, replacing the text inside it (not the button itself)\n         */\n        this.cancelButton = {\n            element: (/**\n             * @param {?} swal\n             * @return {?}\n             */\n            swal => swal.getCancelButton()),\n            options: { showCancelButton: true }\n        };\n        /**\n         * Targets the modal footer contents.\n         */\n        this.footer = {\n            element: (/**\n             * @param {?} swal\n             * @return {?}\n             */\n            swal => swal.getFooter()),\n            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.\n            options: { footer: ' ' }\n        };\n    }\n}\nSwalPortalTargets.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */ SwalPortalTargets.ngInjectableDef = ɵɵdefineInjectable({ factory: function SwalPortalTargets_Factory() { return new SwalPortalTargets(); }, token: SwalPortalTargets, providedIn: \"root\" });\nif (false) {\n    /**\n     * Targets the modal close button block contents.\n     * @type {?}\n     */\n    SwalPortalTargets.prototype.closeButton;\n    /**\n     * Targets the modal title block contents.\n     * @type {?}\n     */\n    SwalPortalTargets.prototype.title;\n    /**\n     * Targets the modal text block contents (that is another block inside the first content block, so you can still\n     * use other modal features like Swal inputs, that are situated inside that parent content block).\n     * @type {?}\n     */\n    SwalPortalTargets.prototype.content;\n    /**\n     * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.\n     * /!\\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this\n     *     target, do not update the modal via <swal> \\@Inputs while the modal is open, or you'll get an error.\n     *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and\n     *     performance of everyone, for a relatively rare use case.\n     * @type {?}\n     */\n    SwalPortalTargets.prototype.actions;\n    /**\n     * Targets the confirm button contents, replacing the text inside it (not the button itself)\n     * @type {?}\n     */\n    SwalPortalTargets.prototype.confirmButton;\n    /**\n     * Targets the cancel button contents, replacing the text inside it (not the button itself)\n     * @type {?}\n     */\n    SwalPortalTargets.prototype.cancelButton;\n    /**\n     * Targets the modal footer contents.\n     * @type {?}\n     */\n    SwalPortalTargets.prototype.footer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPortalDirective for info about the covered feature.\n */\nclass SwalPortalComponent {\n    constructor() {\n        this.template = null;\n    }\n}\nSwalPortalComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'swal-portal',\n                template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }] }\n];\nSwalPortalComponent.propDecorators = {\n    template: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    SwalPortalComponent.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A structural directive that lets you use Angular templates inside of SweetAlerts.\n * There are different targetable zones provided by {\\@link SwalPortalTargets}: title, content, confirmButton, etc, but\n * you can also make your own target by implementing {\\@link SwalPortalTarget} and giving it to this directive.\n * The default target is the alert text content zone.\n *\n * Usage in your component's TypeScript (if you use another target than {\\@link SwalPortalTargets.content}):\n *\n * \\@Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPortalTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPortal [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPortal=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\nclass SwalPortalDirective {\n    /**\n     * @param {?} resolver\n     * @param {?} injector\n     * @param {?} app\n     * @param {?} templateRef\n     * @param {?} sweetAlert2Loader\n     * @param {?} swalTargets\n     * @param {?} swalComponent\n     */\n    constructor(resolver, injector, app, templateRef, sweetAlert2Loader, swalTargets, swalComponent) {\n        this.resolver = resolver;\n        this.injector = injector;\n        this.app = app;\n        this.templateRef = templateRef;\n        this.sweetAlert2Loader = sweetAlert2Loader;\n        this.swalTargets = swalTargets;\n        this.swalComponent = swalComponent;\n        this.destroyed = new Subject();\n    }\n    /**\n     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent\n     * that will receive the consumer's template.\n     * @return {?}\n     */\n    ngOnInit() {\n        // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.\n        this.target = this.target || this.swalTargets.content;\n        //=> Apply the options provided by the target definition\n        void this.swalComponent.update(this.target.options);\n        //=> Subscribe to a few hooks frm the parent SwalComponent.\n        this.swalComponent.render.pipe(takeUntil(this.destroyed)).subscribe(this.renderHook.bind(this));\n        this.swalComponent.beforeOpen.pipe(takeUntil(this.destroyed)).subscribe(this.beforeOpenHook.bind(this));\n        this.swalComponent.afterClose.pipe(takeUntil(this.destroyed)).subscribe(this.afterCloseHook.bind(this));\n    }\n    /**\n     * Signal any {\\@link destroyed} consumer that this is over, so they can unsubscribe from the\n     * parent SwalComponent events.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyed.next();\n    }\n    /**\n     * This render hook runs 1..n times (per modal instance), just before the modal is shown (and also before the\n     * {\\@link beforeOpenHook}), or after Swal.update() is called.\n     * This is a good place to render, or re-render, our portal contents.\n     * @private\n     * @return {?}\n     */\n    renderHook() {\n        return __awaiter(this, void 0, void 0, function* () {\n            //=> Ensure the portal component is created\n            if (!this.portalComponentRef) {\n                this.portalComponentRef = this.createPortalComponent();\n            }\n            //=> SweetAlert2 created the modal or just erased all of our content, so we need to install/reinstall it.\n            // Swal.update() is synchronous, this observable too, and mountComponentOnTarget too (the promise inside\n            // this function is already resolved at this point), so the whole process of re-rendering and re-mounting\n            // the portal component is fully synchronous, causing no blinks in the modal contents.\n            /** @type {?} */\n            const swal = yield this.sweetAlert2Loader.swal;\n            //=> Find target element\n            /** @type {?} */\n            const targetEl = (/** @type {?} */ (this.target)).element(swal);\n            //=> Replace target's contents with our component\n            // https://jsperf.com/innerhtml-vs-removechild/15\n            while (targetEl.firstChild) {\n                targetEl.removeChild(targetEl.firstChild);\n            }\n            targetEl.appendChild(this.portalComponentRef.location.nativeElement);\n        });\n    }\n    /**\n     * This beforeOpen hook runs once (per modal instance), just before the modal is shown on the screen.\n     * This is a good place to declare our detached view to the Angular app.\n     * @private\n     * @return {?}\n     */\n    beforeOpenHook() {\n        if (!this.portalComponentRef)\n            return;\n        //=> Make the Angular app aware of that detached view so rendering and change detection can happen\n        this.app.attachView(this.portalComponentRef.hostView);\n    }\n    /**\n     * This afterClose hook runs once (per modal instance), just after the modal closing animation terminated.\n     * This is a good place to detach and destroy our content, that is not visible anymore.\n     * @private\n     * @return {?}\n     */\n    afterCloseHook() {\n        if (!this.portalComponentRef)\n            return;\n        //=> Detach the portal component from the app and destroy it\n        this.app.detachView(this.portalComponentRef.hostView);\n        this.portalComponentRef.destroy();\n        this.portalComponentRef = void 0;\n    }\n    /**\n     * Creates the {\\@link SwalPortalComponent} and gives it the customer's template ref.\n     * @private\n     * @return {?}\n     */\n    createPortalComponent() {\n        //=> Create the SwalPortalComponent that will hold our content\n        /** @type {?} */\n        const factory = this.resolver.resolveComponentFactory(SwalPortalComponent);\n        // Yes, we do not use the third argument that would directly use the target as the component's view\n        // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)\n        // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be\n        // able to restore it at any moment, ie. after the modal has been re-rendered.\n        /** @type {?} */\n        const componentRef = factory.create(this.injector, []);\n        //=> Apply the consumer's template on the component\n        componentRef.instance.template = this.templateRef;\n        return componentRef;\n    }\n}\nSwalPortalDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[swalPortal]'\n            },] }\n];\n/** @nocollapse */\nSwalPortalDirective.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: Injector },\n    { type: ApplicationRef },\n    { type: TemplateRef },\n    { type: SweetAlert2LoaderService },\n    { type: SwalPortalTargets },\n    { type: SwalComponent, decorators: [{ type: Host }] }\n];\nSwalPortalDirective.propDecorators = {\n    target: [{ type: Input, args: ['swalPortal',] }]\n};\nif (false) {\n    /**\n     * Takes a portal target or nothing (then it will target the text content zone by default).\n     *\n     * See the {\\@link SwalPortalTargets} service to see the available targets.\n     * See the class doc block for more informations.\n     * @type {?}\n     */\n    SwalPortalDirective.prototype.target;\n    /**\n     * Holds the component reference of the controlled SwalPortalComponent to destroy it when no longer needed.\n     * @type {?}\n     * @private\n     */\n    SwalPortalDirective.prototype.portalComponentRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    SwalPortalDirective.prototype.destroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    SwalPortalDirective.prototype.resolver;\n    /**\n     * @type {?}\n     * @private\n     */\n    SwalPortalDirective.prototype.injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    SwalPortalDirective.prototype.app;\n    /**\n     * @type {?}\n     * @private\n     */\n    SwalPortalDirective.prototype.templateRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    SwalPortalDirective.prototype.sweetAlert2Loader;\n    /**\n     * @type {?}\n     * @private\n     */\n    SwalPortalDirective.prototype.swalTargets;\n    /**\n     * @type {?}\n     * @private\n     */\n    SwalPortalDirective.prototype.swalComponent;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction Sweetalert2ModuleConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    Sweetalert2ModuleConfig.prototype.provideSwal;\n    /** @type {?|undefined} */\n    Sweetalert2ModuleConfig.prototype.dismissOnDestroy;\n}\n/**\n * @return {?}\n */\nfunction provideDefaultSwal() {\n    return import('sweetalert2');\n}\nclass SweetAlert2Module {\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n    static forRoot(options = {}) {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [\n                SweetAlert2LoaderService,\n                { provide: swalProviderToken, useValue: options.provideSwal || provideDefaultSwal },\n                { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy || true }\n            ]\n        };\n    }\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n    static forChild(options = {}) {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [\n                ...options.provideSwal ? [\n                    SweetAlert2LoaderService,\n                    { provide: swalProviderToken, useValue: options.provideSwal }\n                ] : [],\n                ...options.dismissOnDestroy !== undefined ? [\n                    { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy }\n                ] : []\n            ]\n        };\n    }\n}\nSweetAlert2Module.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent\n                ],\n                imports: [\n                    CommonModule\n                ],\n                exports: [\n                    SwalComponent, SwalPortalDirective, SwalDirective\n                ],\n                entryComponents: [\n                    SwalComponent, SwalPortalComponent\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { SwalComponent, SwalDirective, SwalPortalTargets, SweetAlert2LoaderService, SweetAlert2Module, provideDefaultSwal as ɵa, swalProviderToken as ɵb, dismissOnDestroyToken as ɵc, SwalPortalDirective as ɵd, SwalPortalComponent as ɵe };\n//# sourceMappingURL=sweetalert2-ngx-sweetalert2.js.map\n"],"sourceRoot":"webpack:///"}